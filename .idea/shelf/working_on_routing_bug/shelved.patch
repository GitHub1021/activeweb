Index: activeweb/src/test/java/org/javalite/activeweb/RouterCustomSpec.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\nCopyright 2009-2016 Igor Polevoy\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); \nyou may not use this file except in compliance with the License. \nYou may obtain a copy of the License at \n\nhttp://www.apache.org/licenses/LICENSE-2.0 \n\nUnless required by applicable law or agreed to in writing, software \ndistributed under the License is distributed on an \"AS IS\" BASIS, \nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \nSee the License for the specific language governing permissions and \nlimitations under the License. \n*/\n\npackage org.javalite.activeweb;\n\nimport app.controllers.*;\nimport app.controllers.api.ApiHomeController;\nimport app.controllers.api.v2.AuthorsController;\nimport org.javalite.common.JsonHelper;\nimport org.javalite.common.Util;\nimport org.javalite.test.SystemStreamUtil;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.mock.web.MockHttpServletResponse;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.Map;\n\n/**\n * @author Igor Polevoy\n */\npublic class RouterCustomSpec extends RequestSpec {\n\n    private AbstractRouteConfig routeConfig;\n    private String nl = System.getProperty(\"line.separator\");\n\n\n    @Before\n    public void before1(){\n        request.setMethod(\"GET\");\n    }\n\n    private void execDispatcher() {\n        try {\n            dispatcher.setRouteConfig(routeConfig);\n            dispatcher.init(config);\n            dispatcher.doFilter(request, response, filterChain);\n        }catch(IllegalArgumentException e){\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String responseContent(){\n        try {\n            return response.getContentAsString();\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Test\n    public void shouldExtractUserSegmentName(){\n        RouteBuilder r = new RouteBuilder(\"\");\n        a(r.getUserSegmentName(\"{user_name}\")).shouldBeEqual(\"user_name\");\n    }\n\n    @Test\n    public void shouldMatchRootRoute() {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/\").to(Route1Controller.class);\n            }\n        };\n        request.setServletPath(\"/\");\n        execDispatcher();\n        a(responseContent()).shouldContain(\"route 1\");\n    }\n\n    @Test\n    public void shouldMatchStaticRoute() {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/greeting\").to(Route2Controller.class).action(\"hi\");\n            }\n        };\n        request.setServletPath(\"/greeting\");\n        execDispatcher();\n        a(responseContent()).shouldContain(\"route 2\");\n    }\n\n    @Test\n    public void shouldMatchBuiltInSegments() throws ClassLoadException, IllegalAccessException, InstantiationException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/{action}/{controller}/{id}\");\n            }\n        };\n\n        request.setServletPath(\"/show/route_3/1\");\n        execDispatcher();\n        a(responseContent()).shouldContain(\"route 3\");\n        a(responseContent()).shouldContain(\"and id: 1\");\n    }\n\n    @Test\n    public void shouldMatchStaticSegmentRoute1() throws ClassLoadException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/greeting/{user_id}\").to(SegmentRoute1Controller.class).action(\"hi\");\n            }\n        };\n\n        request.setServletPath(\"/greeting/alex\");\n        execDispatcher();\n        System.out.println(responseContent());\n        a(responseContent()).shouldContain(\"user id is alex\");\n    }\n\n\n    @Test\n    public void shouldMatchStaticSegmentRoute2() throws ClassLoadException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/greeting/from_mars/{user_name}\").to(SegmentRoute2Controller.class).action(\"hi\");\n            }\n        };\n        request.setServletPath(\"/greeting/from_mars/alex\");\n        execDispatcher();\n\n        a(responseContent()).shouldContain(\"user name is alex\");\n    }\n\n    @Test\n    public void shouldMatchStaticSegmentRoute3() throws ClassLoadException, IllegalAccessException, InstantiationException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/greeting/{user_id}/from_mars/{fav_color}/{action}/{id}\").to(SegmentRoute3Controller.class);\n            }\n        };\n\n        request.setServletPath(\"/greeting/1/from_mars/blue/greeting/123\");\n        execDispatcher();\n        a(responseContent()).shouldContain(\"user_id:1\");\n        a(responseContent()).shouldContain(\"fav_color:blue\");\n        a(responseContent()).shouldContain(\"id:123\");\n    }\n\n\n    @Test\n    public void shouldProvideDefaultAction() throws ClassLoadException, IllegalAccessException, InstantiationException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/greeting\").to(IndexController.class);\n            }\n        };\n\n        request.setServletPath(\"/greeting\");\n        execDispatcher();\n        a(responseContent()).shouldContain(\"I'm an index page!!\");\n    }\n\n\n    @Test\n    public void shouldMatchBuiltInAndUserSegments() throws ClassLoadException, IllegalAccessException, InstantiationException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/{action}/{controller}/{id}/{user_name}/{user_color}\");\n            }\n        };\n\n        request.setServletPath(\"/edit/route_4/1/alex/blue\");\n        execDispatcher();\n        a(responseContent()).shouldContain(\"id:1\" + nl +\n                \"user_name:alex\" + nl +\n                \"user_color:blue\");\n\n\n    }\n\n    @Test    //match 'photos/:id' => 'photos#show' - from Rails guide\n    public void shouldMatchSpecificActionOfController() throws ClassLoadException, IllegalAccessException, InstantiationException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/photos/{id}\").to(Route5Controller.class).action(\"show\");\n            }\n        };\n\n        request.setServletPath(\"/photos/12\");\n        execDispatcher();\n        a(responseContent()).shouldContain(\"id:12\");\n    }\n\n\n    @Test\n    public void shouldRejectRouteIfBothToMethodAndControllerSegmentUsed() throws ClassLoadException, IllegalAccessException, InstantiationException, UnsupportedEncodingException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/photos/{controller}\").to(PhotosController.class).action(\"show\");\n            }\n        };\n\n        request.setServletPath(\"/photos/12\");\n        execDispatcher();\n\n        a(response.getContentAsString()).shouldContain(\"Cannot combine {controller} segment and .to(\\\"...\\\") method. Failed route: /photos/{controller}\");\n\n    }\n\n    @Test\n    public void shouldRejectRouteIfBothActionMethodAndActionSegmentUsed() throws ClassLoadException, IllegalAccessException, InstantiationException, UnsupportedEncodingException {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/photos/{action}\").to(PhotosController.class).action(\"show\");\n            }\n        };\n\n        request.setServletPath(\"/photos/12\");\n        execDispatcher();\n        a(response.getContentAsString()).shouldContain(\"Cannot combine {action} segment and .action(\\\"...\\\") method. Failed route: /photos/{action}\");\n    }\n\n\n    @Test\n    public void shouldNotMatchWithPost(){\n\n        SystemStreamUtil.replaceOut();\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/greeting\").to(Route2Controller.class).post().action(\"hi\");\n            }\n        };\n        request.setServletPath(\"/greeting\");\n        execDispatcher();\n        a(responseContent()).shouldContain(\"java.lang.ClassNotFoundException: app.controllers.GreetingController\");\n        String[] lines = Util.split(SystemStreamUtil.getSystemOut(), System.getProperty(\"line.separator\"));\n        SystemStreamUtil.restoreSystemOut();\n        Map log = JsonHelper.toMap(lines[2]);\n        Map message = (Map) log.get(\"message\");\n        a(message.get(\"error\")).shouldContain(\"java.lang.ClassNotFoundException: app.controllers.GreetingController\");\n    }\n\n\n    @Test\n    public void shouldMatchWithWithPost(){\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/greeting/{action}\").post().to(Route2Controller.class);\n            }\n        };\n        request.setServletPath(\"/greeting/save\");\n        request.setMethod(\"post\");\n        execDispatcher();\n\n        a(responseContent()).shouldContain(\"this is a save.ftl\");\n    }\n\n\n    @Test\n    public void shouldResetControllerWhenMatchingRoute_defect_109() {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/da_value\").get().to(SimpleValueController.class);\n            }\n        };\n        request.setServletPath(\"/da_value\");\n        request.setParameter(\"name\", \"Joe\");\n        request.setMethod(\"get\");\n        execDispatcher();\n\n        a(responseContent()).shouldBeEqual(\"Joe\");\n\n        request = new MockHttpServletRequest();\n        request.setServletPath(\"/da_value\");\n        request.setMethod(\"get\");\n        response = new MockHttpServletResponse();\n        execDispatcher();\n        a(responseContent()).shouldBeEqual(\"\");\n    }\n\n    @Test\n    public void shouldFindControllerInSubPackage() {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/api/v2/{controller}/{aut_id}/\").to(AuthorsController.class).action(\"findById\");\n            }\n        };\n        request.setServletPath(\"/api/v2/authors/9\");\n        execDispatcher();\n\n        the(responseContent()).shouldBeEqual(\"findById found: 9\");\n    }\n\n    @Test\n    public void shouldUseCustomRouteInSubPackage_issue399() {\n\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/api\").to(ApiHomeController.class).action(\"index\").get();\n\n            }\n        };\n        request.setServletPath(\"/api/test\");\n        execDispatcher();\n\n        the(responseContent()).shouldNotContain(\"IndexOutOfBoundsException\");\n        the(responseContent()).shouldContain(\"TestController#index\");\n    }\n\n    @Test\n    public void should_override_package_and_controller_naming_conflict_issue400() {\n\n        //Success with custom route\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/api\").to(ApiController.class).action(\"index\").get();\n            }\n        };\n\n        request.setServletPath(\"/api\");\n        execDispatcher();\n        the(responseContent()).shouldBeEqual(\"ApiController#index\");\n\n        //failure with no config:\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {}\n        };\n\n        request.setServletPath(\"/api\");\n        execDispatcher();\n        the(responseContent()).shouldContain(\"Your controller and package named the same: controllerName=  'api' , controllerPackage= 'api'\");\n    }\n\n    @Test\n    public void should_route_to_options_method() {\n\n        //Success with custom route\n        routeConfig = new AbstractRouteConfig() {\n            public void init(AppContext appContext) {\n                route(\"/options/blah\").to(OptionsController.class).action(\"index\").options();\n            }\n        };\n\n        request.setServletPath(\"/options/blah\");\n        request.setMethod(\"OPTIONS\");\n        execDispatcher();\n        the(responseContent()).shouldBeEqual(\"OptionsController#index\");\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- activeweb/src/test/java/org/javalite/activeweb/RouterCustomSpec.java	(revision f07e83053c8f0a6403f7656b987fda910b19fc75)
+++ activeweb/src/test/java/org/javalite/activeweb/RouterCustomSpec.java	(date 1552418523000)
@@ -327,7 +327,7 @@
     }
 
     @Test
-    public void should_override_package_and_controller_naming_conflict_issue400() {
+    public void should_override_package_and_controller_naming_conflict_issue400_1() {
 
         //Success with custom route
         routeConfig = new AbstractRouteConfig() {
@@ -349,6 +349,59 @@
         execDispatcher();
         the(responseContent()).shouldContain("Your controller and package named the same: controllerName=  'api' , controllerPackage= 'api'");
     }
+
+    @Test
+    public void should_override_package_and_controller_naming_conflict_issue400_and_trailing_slash() {
+
+        //Success with custom route
+        routeConfig = new AbstractRouteConfig() {
+            public void init(AppContext appContext) {
+                route("/api").to(ApiController.class).action("index").get();
+            }
+        };
+
+        request.setServletPath("/api/");
+        execDispatcher();
+        the(responseContent()).shouldBeEqual("ApiController#index");
+
+        //failure with no config:
+        routeConfig = new AbstractRouteConfig() {
+            public void init(AppContext appContext) {}
+        };
+
+        request.setServletPath("/api/");
+        execDispatcher();
+        the(responseContent()).shouldContain("Your controller and package named the same: controllerName=  'api' , controllerPackage= 'api'");
+    }
+
+    /**
+     *     //Same as above, but with a trailing slash in the custom route
+     */
+    @Test
+    public void should_override_package_and_controller_naming_conflict_issue400_and_trailing_slash2() {
+
+        //Success with custom route
+        routeConfig = new AbstractRouteConfig() {
+            public void init(AppContext appContext) {
+                route("/api/").to(ApiController.class).action("index").get();
+            }
+        };
+
+        request.setServletPath("/api/");
+        execDispatcher();
+        the(responseContent()).shouldBeEqual("ApiController#index");
+
+        //failure with no config:
+        routeConfig = new AbstractRouteConfig() {
+            public void init(AppContext appContext) {}
+        };
+
+        request.setServletPath("/api/");
+        execDispatcher();
+        the(responseContent()).shouldContain("Your controller and package named the same: controllerName=  'api' , controllerPackage= 'api'");
+
+    }
+
 
     @Test
     public void should_route_to_options_method() {
Index: activeweb/src/main/java/org/javalite/activeweb/Router.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\nCopyright 2009-2016 Igor Polevoy\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); \nyou may not use this file except in compliance with the License. \nYou may obtain a copy of the License at \n\nhttp://www.apache.org/licenses/LICENSE-2.0 \n\nUnless required by applicable law or agreed to in writing, software \ndistributed under the License is distributed on an \"AS IS\" BASIS, \nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \nSee the License for the specific language governing permissions and \nlimitations under the License. \n*/\npackage org.javalite.activeweb;\n\nimport org.javalite.common.Inflector;\nimport org.javalite.common.Util;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.URLEncoder;\nimport java.util.*;\n\nimport static org.javalite.activeweb.ControllerFactory.createControllerInstance;\nimport static org.javalite.activeweb.ControllerFactory.getControllerClassName;\n\n/**\n * Responsible for looking at a URI and creating a route to controller if one is found.\n * This is a thread - safe class.\n *\n * @author Igor Polevoy\n */\npublic class Router {\n    private static Logger logger = LoggerFactory.getLogger(Router.class);\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(Router.class);\n\n\n    private String rootControllerName;\n    private List<RouteBuilder> routes = new ArrayList<>();\n    private List<IgnoreSpec> ignoreSpecs;\n\n    protected Router(String rootControllerName) {\n        this.rootControllerName = rootControllerName;\n    }\n\n    /**\n     * Sets custom routes\n     *\n     * @param routes se of custom routes defined for app.\n     */\n    public void setRoutes(List<RouteBuilder> routes) {\n        this.routes = routes;\n    }\n\n    /**\n     * This is a main method for recognizing a route to a controller; used when a request is received.\n     *\n     * @param uri        URI of incoming request.\n     * @param httpMethod http method of the request.\n     * @return instance of a <code>Route</code> if one is found, null if not.\n     */\n    protected Route recognize(String uri, HttpMethod httpMethod) throws ClassLoadException {\n\n        ControllerPath controllerPath = getControllerPath(uri);\n\n        Route route = matchCustom(uri, controllerPath, httpMethod);\n        if (route == null) { //proceed to built-in routes\n            if (controllerPath.getControllerName() == null) {\n                return null;\n            }\n            String controllerClassName = getControllerClassName(controllerPath);\n            AppController controller = createControllerInstance(controllerClassName);\n\n            if (uri.equals(\"/\") && rootControllerName != null) {\n                route = new Route(controller, \"index\", httpMethod);\n            }else{\n                route = controller.restful() ? matchRestful(uri, controllerPath, httpMethod, controller) :\n                        matchStandard(uri, controllerPath, controller, httpMethod);\n            }\n        }\n\n        if(route != null){\n            route.setIgnoreSpecs(ignoreSpecs);\n        }else{\n            logger.error(\"Failed to recognize URL: '\" + uri + \"'\");\n            throw new RouteException(\"Failed to map resource to URI: \" + uri);\n        }\n\n        return route;\n    }\n\n    private Route matchCustom(String uri, ControllerPath controllerPath, HttpMethod httpMethod) throws ClassLoadException {\n        for (RouteBuilder builder : routes) {\n            if (builder.matches(uri, controllerPath, httpMethod)) {\n                return new Route(builder, httpMethod, true);\n            }\n        }\n\n\n        if(controllerPath.isNull()){\n            return null;\n        }else if(controllerPath.getControllerName().equals(controllerPath.getControllerPackage())){\n            throw new RouteException(\"Your controller and package named the same: \" + controllerPath);\n        }else {\n            return null;\n        }\n    }\n\n\n    /**\n     * Will match a standard, non-restful route.\n     *\n     * @param uri            request URI\n     *\n     * @return instance of a <code>Route</code> if one is found, null if not.\n     */\n    private Route matchStandard(String uri, ControllerPath controllerPathObject, AppController controller, HttpMethod method) {\n\n        String controllerPath = (controllerPathObject.getControllerPackage() != null ? \"/\" + controllerPathObject.getControllerPackage().replace(\".\", \"/\") : \"\") + \"/\" + controllerPathObject.getControllerName();\n        String theUri = uri.endsWith(\"/\") ? uri.substring(0, uri.length() - 1) : uri;\n\n        //ANY    /package_suffix/controller\n        if (controllerPath.length() == theUri.length()) {\n            return new Route(controller, \"index\", method);\n        }\n\n        String[] parts;\n        try {\n            String tail = theUri.substring(controllerPath.length() + 1);\n            parts = split(tail, \"/\");\n        } catch (Exception e) {\n            throw new RouteException(\"Failed to parse route from: '\" + uri + \"'\", e);\n        }\n\n\n        //ANY    /package_suffix/controller/action\n        if (parts.length == 1) {\n            return new Route(controller, parts[0], method);\n        }\n\n        //ANY    /package_suffix/controller/action/id/\n        if (parts.length == 2) {\n            return new Route(controller, parts[0], parts[1], method);\n        }\n        LOGGER.warn(\"Failed to find action for request: \" + uri);\n        return null;\n    }\n\n\n    /**\n     * Will match a restful route.\n     *\n     * @param uri            request URI\n     * @param controllerPathObject contains controller name and package\n     * @param method     http method of a request.\n     * @return instance of a <code>Route</code> if one is found, null if not.\n     */\n    private Route matchRestful(String uri, ControllerPath controllerPathObject, HttpMethod method, AppController controller) {\n\n        String theUri = uri.endsWith(\"/\") ? uri.substring(0, uri.length() - 1) : uri;\n        String controllerPath = (controllerPathObject.getControllerPackage() != null ? \"/\" + controllerPathObject.getControllerPackage().replace(\".\", \"/\") : \"\") + \"/\" + controllerPathObject.getControllerName();\n        String tail = theUri.length() > controllerPath.length() ? theUri.substring(controllerPath.length() + 1) : \"\";\n        String[] parts = split(tail, \"/\");\n\n        //GET \t/photos \t            index \tdisplay a list of all photos\n        if (controllerPath.equals(theUri) && method.equals(HttpMethod.GET)) {\n            return new Route(controller, \"index\", method);\n        }\n\n        //GET \t/photos/new_form \t    new_form        return an HTML form for creating a new photo\n        if (parts.length == 1 && method.equals(HttpMethod.GET) && parts[0].equalsIgnoreCase(\"new_form\")) {\n            return new Route(controller, \"new_form\", method);\n        }\n\n        //POST \t/photos \t            create \t        create a new photo\n        if (parts.length == 0 && method.equals(HttpMethod.POST)) {\n            return new Route(controller, \"create\", method);\n        }\n\n        //GET \t/photos/id \t        show            display a specific photo\n        if (parts.length == 1 && method.equals(HttpMethod.GET)) {\n            return new Route(controller, \"show\", parts[0], method);\n        }\n\n        //GET \t/photos/id/edit_form   edit_form \t    return an HTML form for editing a photo\n        if (parts.length == 2 && method.equals(HttpMethod.GET) && parts[1].equalsIgnoreCase(\"edit_form\")) {\n            return new Route(controller, \"edit_form\", parts[0], method);\n        }\n\n        //PUT \t/photos/id \t        update          update a specific photo\n        if (parts.length == 1 && method.equals(HttpMethod.PUT)) {\n            return new Route(controller, \"update\", parts[0], method);\n        }\n\n        //DELETE \t/photos/id \t        destroy         delete a specific photo\n        if (parts.length == 1 && method.equals(HttpMethod.DELETE)) {\n            return new Route(controller, \"destroy\", parts[0], method);\n        }\n\n        //OPTIONS \t/photos/            options\n        if (parts.length == 0 && method.equals(HttpMethod.OPTIONS)) {\n            return new Route(controller, \"options\", method);\n        }\n\n        //OPTIONS \t/photos/new_form \t    new_form        return an HTML form for creating a new photo\n        if (parts.length == 1 && method.equals(HttpMethod.OPTIONS) && parts[0].equalsIgnoreCase(\"new_form\")) {\n            Route r = new Route(controller, \"options\", parts[0], method);\n            r.setTargetAction(\"new_form\");\n            return r;\n\n        }\n\n        //OPTIONS \t/photos/id/edit_form \t    edit_form\n        if (parts.length == 2 && method.equals(HttpMethod.OPTIONS) && parts[1].equalsIgnoreCase(\"edit_form\")) {\n            Route r = new Route(controller, \"options\", parts[0], method);\n            r.setTargetAction(\"edit_form\");\n            return r;\n        }\n\n        //OPTIONS /photos/id \t        show            display a specific photo\n        if (parts.length == 1 && method.equals(HttpMethod.OPTIONS)) {\n            Route r = new Route(controller, \"options\", parts[0], method);\n            r.setTargetAction(\"show\");\n            return r;\n        }\n\n        LOGGER.warn(\"Failed to find action for request: \" + uri);\n        return null;\n    }\n\n\n    /**\n     * Generates a URI for a controller.\n     *\n     * @param controllerPath path to controller.\n     * @param action         action for a controller\n     * @param id             id on a URI\n     * @param restful        true if a route for a restful controller is needed, false for non-restful.\n     * @param params         name/value pairs to be used to form a query string.\n     * @return formed URI based on arguments.\n     */\n    public static String generate(String controllerPath, String action, String id, boolean restful, Map params) {\n\n        //prepend slash if missing\n        StringBuilder uri = new StringBuilder(controllerPath.startsWith(\"/\") ? controllerPath : \"/\" + controllerPath);\n\n        if (restful) {\n            if (action != null && !(action.equals(\"new_form\") || action.equals(\"edit_form\"))) {\n                throw new IllegalArgumentException(\"Illegal action name: '\" + action +\n                        \"', allowed names for restful controllers: 'new_form' and 'edit_form'\");\n            }\n\n            if (action != null && action.equals(\"new_form\") && id != null) {\n                throw new IllegalArgumentException(\"Cannot provide ID to action 'new_form'\");\n            }\n\n            if (action != null && action.equals(\"edit_form\") && id == null) {\n                throw new IllegalArgumentException(\"Must provide ID to action 'edit_form'\");\n            }\n\n            if (id != null) {\n                uri.append(\"/\").append(id);\n            }\n\n            if (action != null) {\n                uri.append(\"/\").append(action);\n            }\n        } else {\n            if (action != null) {\n                uri.append(\"/\").append(action);\n            }\n\n            if (id != null) {\n                uri.append(\"/\").append(id);\n            }\n        }\n\n        if (params.size() > 0) {\n            uri.append(\"?\");\n        }\n\n        List<String> pairs = new ArrayList<>();\n\n        for (Object key : params.keySet()) {\n            try {\n                pairs.add(URLEncoder.encode(key.toString(), \"UTF-8\") + \"=\" + URLEncoder.encode(params.get(key).toString(), \"UTF-8\"));\n            } catch (Exception e) {\n                pairs.add(URLEncoder.encode(key.toString()) + \"=\" + URLEncoder.encode(params.get(key).toString()));\n            }\n        }\n        //sorting to make hard-coded tests pass\n        Collections.sort(pairs, new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return o1.compareTo(o2);\n            }\n        });\n\n        Util.join(uri, pairs, \"&\");\n\n        return uri.toString();\n    }\n\n\n    /**\n     * Finds a controller path from URI. Controller path includes a package prefix taken from URI, similar to:\n     * <p/>\n     * <code>http://host/context/admin/printers/show/1</code>, where \"admin\" is a \"package_suffix\", \"printers\" is a\n     * \"controller_name\".\n     * <p/>\n     * for example above, the method will Map with two keys: \"package_suffix\" and \"controller_name\"\n     *\n     * @param uri this is a URI - the information after context : \"controller/action/whatever\".\n     * @return map with two keys: \"controller_name\" and \"package_suffix\", both of which can be null.\n     */\n    protected ControllerPath getControllerPath(String uri) {\n\n        boolean rootPath = uri.equals(\"/\");\n        boolean useRootController = rootPath && rootControllerName != null;\n\n        if (useRootController) {\n            return new ControllerPath(rootControllerName);\n        } else if (rootControllerName == null && rootPath) {\n            LOGGER.warn(\"URI is: '/', but root controller not set\");\n            return new ControllerPath();\n        } else {\n            String controllerPackage;\n            if ((controllerPackage = findPackageSuffix(uri)) != null) {\n                String controllerName = findControllerNamePart(controllerPackage, uri);\n                return new ControllerPath(controllerName, controllerPackage);\n            } else {\n                return new ControllerPath(uri.split(\"/\")[1]);//no package suffix\n            }\n        }\n    }\n\n    /**\n     * Generates a path to a controller based on its package and class name. The path always starts with a slash: \"/\".\n     * Examples:\n     * <p/>\n     * <ul>\n     * <li>For class: <code>app.controllers.Simple</code> the path will be: <code>/simple</code>.</li>\n     * <li>For class: <code>app.controllers.admin.PeopleAdmin</code> the path will be: <code>/admin/people_admin</code>.</li>\n     * <li>For class: <code>app.controllers.admin.simple.PeopleAdmin</code> the path will be: <code>/admin/simple/people_admin</code>.</li>\n     * </ul>\n     * <p/>\n     * Class name looses the \"Controller\" suffix and gets converted to underscore format, while packages stay unchanged.\n     *\n     * @param controllerClass class of a controller.\n     * @return standard path for a controller.\n     */\n    static <T extends AppController> String getControllerPath(Class<T> controllerClass) {\n        String simpleName = controllerClass.getSimpleName();\n        if (!simpleName.endsWith(\"Controller\")) {\n            throw new ControllerException(\"controller name must end with 'Controller' suffix\");\n        }\n\n        String className = controllerClass.getName();\n        if (!className.startsWith(\"app.controllers\")) {\n            throw new ControllerException(\"controller must be in the 'app.controllers' package\");\n        }\n        String packageSuffix = className.substring(\"app.controllers\".length(), className.lastIndexOf(\".\"));\n        packageSuffix = packageSuffix.replace(\".\", \"/\");\n        if (packageSuffix.startsWith(\"/\"))\n            packageSuffix = packageSuffix.substring(1);\n\n        return (packageSuffix.equals(\"\") ? \"\" : \"/\" + packageSuffix) + \"/\" + Inflector.underscore(simpleName.substring(0, simpleName.lastIndexOf(\"Controller\")));\n    }\n\n    /**\n     * Now that we know that this controller is under a package, need to find the controller short name.\n     *\n     * @param pack part of the package of the controller, taken from URI: value between \"app.controllers\" and controller name.\n     * @param uri  uri from request\n     * @return controller name\n     */\n    protected static String findControllerNamePart(String pack, String uri) {\n        String temp = uri.startsWith(\"/\") ? uri.substring(1) : uri;\n        temp = temp.replace(\"/\", \".\");\n        if (temp.length() > pack.length())\n            temp = temp.substring(pack.length() + 1);\n\n        if (temp.equals(\"\") )\n            throw new ControllerException(\"You defined a controller package '\" + pack + \"', but did not specify controller name\");\n\n        return temp.split(\"\\\\.\")[0];\n    }\n\n    /**\n     * Finds a part of a package name which can be found in between \"app.controllers\" and short name of class.\n     *\n     * @param uri uri from request\n     * @return a part of a package name which can be found in between \"app.controllers\" and short name of class, or null\n     *         if not found\n     */\n    protected String findPackageSuffix(String uri) {\n\n        String temp = uri.startsWith(\"/\") ? uri.substring(1) : uri;\n        temp = temp.replace(\".\", \"_\");\n        temp = temp.replace(\"/\", \".\");\n\n        //find all matches\n        List<String> candidates = new ArrayList<>();\n\n        for (String pack : Configuration.getControllerPackages()) {\n            if (temp.startsWith(pack) && (temp.length() == pack.length() || temp.length() > pack.length() && temp.charAt(pack.length()) == '.')) {\n                candidates.add(pack);\n            }\n        }\n        int resultIndex = 0;\n        int size = 0;\n        //find the longest package\n        for (int i = 0; i < candidates.size(); i++) {\n            String candidate = candidates.get(i);\n            if (candidate.length() > size) {\n                size = candidate.length();\n                resultIndex = i;\n            }\n        }\n        return !candidates.isEmpty() ? candidates.get(resultIndex) : null;\n    }\n\n    //todo: write a regexp one day\n    private static String[] split(String value, String delimeter) {\n        StringTokenizer st = new StringTokenizer(value, delimeter);\n        String[] res = new String[st.countTokens()];\n        for (int i = 0; st.hasMoreTokens(); i++) {\n            res[i] = st.nextToken();\n        }\n        return res;\n    }\n\n    public void setIgnoreSpecs(List<IgnoreSpec> ignoreSpecs) {\n        this.ignoreSpecs = ignoreSpecs;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- activeweb/src/main/java/org/javalite/activeweb/Router.java	(revision f07e83053c8f0a6403f7656b987fda910b19fc75)
+++ activeweb/src/main/java/org/javalite/activeweb/Router.java	(date 1552417921000)
@@ -379,13 +379,17 @@
     protected static String findControllerNamePart(String pack, String uri) {
         String temp = uri.startsWith("/") ? uri.substring(1) : uri;
         temp = temp.replace("/", ".");
-        if (temp.length() > pack.length())
+
+        if(temp.endsWith(".")){
+            temp = temp.substring(0, temp.length() - 1);
+        }else if (temp.length() > pack.length())
             temp = temp.substring(pack.length() + 1);
 
         if (temp.equals("") )
             throw new ControllerException("You defined a controller package '" + pack + "', but did not specify controller name");
 
-        return temp.split("\\.")[0];
+
+        return (temp.contains(".")) ? temp.split("\\.")[0] : temp;
     }
 
     /**
